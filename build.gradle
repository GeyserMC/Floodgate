import net.fabricmc.loom.task.RemapJarTask

plugins {
    id 'com.github.johnrengelman.shadow' version '7.0.0'
    id 'fabric-loom' version '1.0-SNAPSHOT'
    id 'java'
    id 'maven-publish'
    id "com.modrinth.minotaur" version "2.+"
}

sourceCompatibility = JavaVersion.VERSION_17
targetCompatibility = JavaVersion.VERSION_17

archivesBaseName = project.archives_base_name
version = project.mod_version
group = project.maven_group

loom {
    accessWidenerPath = file("src/main/resources/floodgate.accesswidener")
}

dependencies {
    //to change the versions see the gradle.properties file
    minecraft "com.mojang:minecraft:${project.minecraft_version}"
    mappings loom.officialMojangMappings()
    modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

    // Fabric API. This is technically optional, but you probably want it anyway.
    modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"

    // PSA: Some older mods, compiled on Loom 0.2.1, might have outdated Maven POMs.
    // You may need to force-disable transitiveness on them.

    // Base Floodgate
    implementation("org.geysermc.floodgate:core:${project.mod_version}")
    shadow("org.geysermc.floodgate:core:${project.mod_version}") {
        exclude group: "cloud.commandframework", module: "*" // Cloud is included jar-in-jar
        exclude group: "org.geysermc.floodgate", module: "api"
        exclude group: 'com.google.guava', module: "guava"
        exclude group: 'com.google.code.gson', module: "gson"
        exclude group: 'org.slf4j', module: "slf4j-api"
        exclude group: 'it.unimi.dsi.fastutil', module: "*"
    }

    shadow(implementation("org.geysermc.floodgate:api:${project.mod_version}")) {
        exclude group: 'com.google.guava', module: "guava"
        exclude group: 'com.google.code.gson', module: "gson"
        exclude group: "org.ow2.asm", module: "*" // From Events lib
    }

    include(modImplementation('cloud.commandframework:cloud-fabric:1.8.3') {
        because "Commands library implementation for Fabric"
    })

    include(modImplementation('net.kyori:adventure-platform-fabric:5.8.0-SNAPSHOT') {
        because "Chat library implementation for Fabric that includes methods for communicating with the server"
        // Thanks to zml for this fix
        // The package modifies Brigadier which causes a LinkageError at runtime if included
        exclude group: 'ca.stellardrift', module: "colonel"
    })

    // Lombok
    compileOnly "org.projectlombok:lombok:${project.lombok_version}"
    annotationProcessor "org.projectlombok:lombok:${project.lombok_version}"
}

repositories {
    //mavenLocal()
    maven {
        url = 'https://oss.sonatype.org/content/repositories/snapshots'
    }
    // specifically for adventure-platform-fabric:5.4.0-SNAPSHOT
    maven {
        name = "sonatype-oss-snapshots1"
        url = "https://s01.oss.sonatype.org/content/repositories/snapshots/"
        mavenContent { snapshotsOnly() }
    }
    // Standard OpenCollab repositories
    maven {
        name = 'opencollab-release-repo'
        url = 'https://repo.opencollab.dev/maven-releases/'
        //TODO set as releases
    }
    maven {
        name = 'opencollab-snapshot-repo'
        url = 'https://repo.opencollab.dev/maven-snapshots/'
    }
}

processResources {
    inputs.property "version", project.version

    filesMatching("fabric.mod.json") {
        expand "version": project.version
    }
}

// ensure that the encoding is set to UTF-8, no matter what the system default is
// this fixes some edge cases with special characters not displaying correctly
// see http://yodaconditions.net/blog/fix-for-java-file-encoding-problems-with-gradle.html
tasks.withType(JavaCompile) {
    options.encoding = "UTF-8"
}

java {
    // Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
    // if it is present.
    // If you remove this line, sources will not be generated.
    withSourcesJar()
}

shadowJar {
    configurations = [project.configurations.shadow]
    // TODO this is temporary until Floodgate's dev branch is merged
    relocate("com.google.inject", "org.geysermc.floodgate.shadow.guice")
    relocate("org.yaml.snakeyaml", "org.geysermc.floodgate.shadow.snakeyaml") //relocate snakeyaml to avoid conflicts with other mods
    exclude([
            'cloud/**',
            'com/google/common/**', 'com/google/errorprone/**', 'com/google/gson/**', 'com/google/j2objc/**', 'com/google/thirdparty/**',
            'it/unimi/**',
            'org/slf4j/**'
    ])
}

task remappedShadowJar(type: RemapJarTask) {
    dependsOn tasks.shadowJar
    input = tasks.shadowJar.archiveFile
    addNestedDependencies = true
    archiveName = "floodgate-fabric.jar"
}

tasks.assemble.dependsOn tasks.remappedShadowJar

artifacts {
    archives remappedShadowJar
    shadow shadowJar
}

// configure the maven publication
publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
        }
    }

    // select the repositories you want to publish to
    repositories {
        mavenLocal()
    }
}

modrinth {
    projectId = "bWrNNfkb"
    versionNumber = project.version as String + "-" + System.getenv("GITHUB_RUN_NUMBER")
    versionType = "beta"
    changelog = "A changelog can be found at https://github.com/GeyserMC/Floodgate-Fabric/commits"

    syncBodyFrom = rootProject.file("README.md").text

    uploadFile = tasks.getByPath("remappedShadowJar")
    gameVersions.addAll("1.19.4", "1.20")

    loaders = ["fabric"]

    dependencies {
        required.project "fabric-api"
    }
}